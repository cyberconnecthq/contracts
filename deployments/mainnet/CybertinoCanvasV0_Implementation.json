{
  "address": "0xf9849F6d4E00Ad734E8bfcc8a046658eC612d76A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "CybertinoMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "CybertinoCanvas_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "CybertinoCanvas_init_unchained",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_nonces",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "canvases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "layerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "contract ILayer",
              "name": "layer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "layerID",
              "type": "uint256"
            }
          ],
          "internalType": "struct InfluencerStorageV0.LayerToken[]",
          "name": "_tokens",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "createCanvas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "executed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getLayerTokens",
      "outputs": [
        {
          "internalType": "contract ILayer[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "updateSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f3d158f95f3b489d0754c959171df44ea7bc470b6d91eee48a14a1c73d9373a",
  "receipt": {
    "to": null,
    "from": "0xb5e12e3Afbb78bd8dE08A0Cf91b65229478b8d22",
    "contractAddress": "0xf9849F6d4E00Ad734E8bfcc8a046658eC612d76A",
    "transactionIndex": 342,
    "gasUsed": "2833644",
    "logsBloom": "0x
    "blockHash": "0x411be064e9ab085032b9e1dbca11269b9c525918085e418de18af4853494196c",
    "transactionHash": "0x4f3d158f95f3b489d0754c959171df44ea7bc470b6d91eee48a14a1c73d9373a",
    "logs": [],
    "blockNumber": 13005573,
    "cumulativeGasUsed": "29961151",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4faf2968e16dbbb636089e4621345c82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CybertinoMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CybertinoCanvas_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CybertinoCanvas_init_unchained\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canvases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"contract ILayer\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerID\",\"type\":\"uint256\"}],\"internalType\":\"struct InfluencerStorageV0.LayerToken[]\",\"name\":\"_tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"createCanvas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLayerTokens\",\"outputs\":[{\"internalType\":\"contract ILayer[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchMint(address,uint256[],uint256[],uint256[],bytes[],bytes[])\":{\"details\":\"Batch mints multiple different existing NFT types\",\"params\":{\"_amounts\":\"numbers of NFTs of same type to mint\",\"_data\":\"Data to pass if receiver is contract\",\"_ids\":\"IDs of the type of NFT to mint\",\"_nonces\":\"platform nounces to prevent replay\",\"_signatures\":\"Verified signatures granting _account an NFT\",\"_to\":\"Account to mint NFT to (i.e. the owner)\"}},\"createCanvas(string,bytes,(address,uint256)[],uint256)\":{\"details\":\"Creates a new Canvas type\",\"params\":{\"_cid\":\"Content identifier param _data Data to pass if receiver is contract\"},\"returns\":{\"_id\":\"the newly created token ID\"}},\"getLayerTokens(uint256)\":{\"details\":\"get Layer Token <address, id> pair, used to query token states with ILayer contracts\"},\"getMessageHash(address,uint256,uint256,uint256)\":{\"details\":\"Create message hash to be signed\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"maxSupply(uint256)\":{\"details\":\"Returns the max quantity for a token ID\",\"params\":{\"_id\":\"ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"mint(address,uint256,uint256,uint256,bytes,bytes)\":{\"details\":\"Mints an existing Canvas NFT\",\"params\":{\"_amount\":\"number of NFTs of same type to mint\",\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"ID (i.e. type) of NFT to mint\",\"_nonce\":\"platform nounce to prevent replay\",\"_signature\":\"Verified signature granting _account an NFT\",\"_to\":\"Account to mint NFT to (i.e. the owner)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause or unpause the minting and creation of NFTs\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setURI(string)\":{\"details\":\"Sets a new URI for all token types\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSigner(address)\":{\"details\":\"Update the signer\"},\"uri(uint256)\":{\"details\":\"Returns the uri of a token given its ID\",\"params\":{\"_id\":\"ID of the token to query\"},\"returns\":{\"_0\":\"uri of the token or an empty string if it does not exist\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[],uint256[],uint256[],bytes[],bytes[])\":{\"notice\":\"Enforces a maximum of 1 minting event per account per NFT type\"},\"mint(address,uint256,uint256,uint256,bytes,bytes)\":{\"notice\":\"Enforces a maximum of 1 minting event per NFT type per account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CybertinoCanvas/CybertinoCanvasV0.sol\":\"CybertinoCanvasV0\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155Upgradeable).interfaceId\\n            || interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x9bd2707e55ec6da4d7f9c763d2e78ae7a954019deb798ed5bf59862cf1064b32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xd841c561258151c3c22f05feb68c702fc414b112606bd72b848e8a65af128c30\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xa22cd3d499a04af4dbcc1b15877b69b611004ff02a2ab121e42226a6b6a88ab9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec472de031bf21bae80739c99f9fec4edcd0d728e424f0f557c4288b3e58e49d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x1256e3a5b3acc1bb820c5342c003431117bfc7b9d654e0c0251076b268e6bf7c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/CybertinoCanvas/CybertinoCanvasV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\nimport '../Storage/CybertinoCanvasStorageV0.sol';\\nimport '../Interface/ICybertinoCanvas.sol';\\nimport '../Interface/ILayer.sol';\\n\\ncontract CybertinoCanvasV0 is\\n  ERC1155Upgradeable,\\n  OwnableUpgradeable,\\n  ICybertinoCanvas,\\n  InfluencerStorageV0\\n{\\n  using ECDSAUpgradeable for bytes32;\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n  function CybertinoCanvas_init(\\n    string memory _name,\\n    string memory _uri,\\n    string memory _symbol,\\n    address _signer,\\n    address _owner\\n  ) public initializer {\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __Ownable_init_unchained();\\n    __ERC1155_init_unchained(_uri);\\n    CybertinoCanvas_init_unchained(_name, _symbol, _signer, _owner);\\n  }\\n\\n  function CybertinoCanvas_init_unchained(\\n    string memory _name,\\n    string memory _symbol,\\n    address _signer,\\n    address _owner\\n  ) public initializer {\\n    name = _name;\\n    symbol = _symbol;\\n    signer = _signer;\\n    transferOwnership(_owner);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC1155Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(ICybertinoCanvas).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  modifier pausable {\\n    if (paused) {\\n      revert('Paused');\\n    } else {\\n      _;\\n    }\\n  }\\n\\n  /**\\n   * @dev Creates a new Canvas type\\n   * @param _cid Content identifier\\n   * param _data Data to pass if receiver is contract\\n   * @return _id the newly created token ID\\n   */\\n  function createCanvas(\\n    string calldata _cid,\\n    bytes calldata _data,\\n    LayerToken[] calldata _tokens,\\n    uint256 _maxSupply\\n  ) external onlyOwner returns (uint256 _id) {\\n    require(bytes(_cid).length > 0, 'Err: Missing Content Identifier');\\n    require(_tokens.length > 0, 'Err: Must have at least one layer');\\n\\n    _id = _nextId();\\n\\n    canvases[_id].id = _id;\\n    canvases[_id].layerCount = _tokens.length;\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      canvases[_id].layerTokens[i] = _tokens[i];\\n    }\\n\\n    _mint(_msgSender(), _id, 0, _data);\\n\\n    idToUri[_id] = _cid;\\n    maxTokenSupply[_id] = _maxSupply;\\n\\n    emit URI(uri(_id), _id);\\n  }\\n\\n  /**\\n   * @dev Mints an existing Canvas NFT\\n   * @notice Enforces a maximum of 1 minting event per NFT type per account\\n   * @param _to Account to mint NFT to (i.e. the owner)\\n   * @param _id ID (i.e. type) of NFT to mint\\n   * @param _amount number of NFTs of same type to mint\\n   * @param _nonce platform nounce to prevent replay\\n   * @param _signature Verified signature granting _account an NFT\\n   * @param _data Data to pass if receiver is contract\\n   */\\n  function mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    uint256 _nonce,\\n    bytes calldata _signature,\\n    bytes calldata _data\\n  ) public pausable {\\n    require(_exists(_id), 'CybertinoCanvas: invalid ID');\\n    require(_amount >= 1, 'CybertinoCanvas: must mint at least one');\\n    require(\\n      tokenSupply[_id] + _amount <= maxTokenSupply[_id],\\n      'CybertinoCanvas: exceeds max supply'\\n    );\\n    bytes32 messageHash = getMessageHash(_to, _id, _amount, _nonce);\\n    require(!executed[messageHash], 'CybertinoCanvas: already minted');\\n    require(\\n      _verify(messageHash, _signature),\\n      'CybertinoCanvas: invalid signature'\\n    );\\n    executed[messageHash] = true;\\n\\n    _mint(_to, _id, _amount, _data);\\n    tokenSupply[_id] += _amount;\\n\\n    address operator = _msgSender();\\n\\n    emit CybertinoMint(operator, _to, _id, _amount, _nonce);\\n  }\\n\\n  /**\\n   * @dev Batch mints multiple different existing NFT types\\n   * @notice Enforces a maximum of 1 minting event per account per NFT type\\n   * @param _to Account to mint NFT to (i.e. the owner)\\n   * @param _ids IDs of the type of NFT to mint\\n   * @param _amounts numbers of NFTs of same type to mint\\n   * @param _nonces platform nounces to prevent replay\\n   * @param _signatures Verified signatures granting _account an NFT\\n   * @param _data Data to pass if receiver is contract\\n   */\\n  function batchMint(\\n    address _to,\\n    uint256[] calldata _ids,\\n    uint256[] calldata _amounts,\\n    uint256[] calldata _nonces,\\n    bytes[] calldata _signatures,\\n    bytes[] calldata _data\\n  ) external pausable {\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      mint(_to, _ids[i], _amounts[i], _nonces[i], _signatures[i], _data[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types\\n   */\\n  function setURI(string memory _uri) public onlyOwner {\\n    _setURI(_uri);\\n  }\\n\\n  /**\\n   * @dev Returns the uri of a token given its ID\\n   * @param _id ID of the token to query\\n   * @return uri of the token or an empty string if it does not exist\\n   */\\n  function uri(uint256 _id) public view override returns (string memory) {\\n    string memory baseUri = super.uri(0);\\n    if (bytes(baseUri).length == 0) {\\n      return '';\\n    } else {\\n      return string(abi.encodePacked(baseUri, idToUri[_id]));\\n    }\\n  }\\n\\n  /**\\n   * @dev get Layer Token <address, id> pair, used to query token states\\n   * with ILayer contracts\\n   */\\n  function getLayerTokens(uint256 _id)\\n    public\\n    view\\n    returns (ILayer[] memory, uint256[] memory)\\n  {\\n    Canvas storage canvas = canvases[_id];\\n    ILayer[] memory layers = new ILayer[](canvas.layerCount);\\n    uint256[] memory ids = new uint256[](canvas.layerCount);\\n    for (uint256 i = 0; i < canvas.layerCount; i++) {\\n      layers[i] = canvas.layerTokens[i].layer;\\n      ids[i] = canvas.layerTokens[i].layerID;\\n    }\\n    return (layers, ids);\\n  }\\n\\n  /**\\n   * @dev Returns the total quantity for a token ID\\n   * @param _id ID of the token to query\\n   * @return amount of token in existence\\n   */\\n  function totalSupply(uint256 _id) public view returns (uint256) {\\n    return tokenSupply[_id];\\n  }\\n\\n  /**\\n   * @dev Returns the max quantity for a token ID\\n   * @param _id ID of the token to query\\n   * @return amount of token in existence\\n   */\\n  function maxSupply(uint256 _id) public view returns (uint256) {\\n    return maxTokenSupply[_id];\\n  }\\n\\n  /**\\n   * @dev Pause or unpause the minting and creation of NFTs\\n   */\\n  function pause() public onlyOwner {\\n    paused = !paused;\\n  }\\n\\n  /**\\n   * @dev Update the signer\\n   */\\n  function updateSigner(address _signer) public onlyOwner {\\n    signer = _signer;\\n  }\\n\\n  /**\\n   * @dev Create message hash to be signed\\n   */\\n  function getMessageHash(\\n    address _to,\\n    uint256 _tokenId,\\n    uint256 _amount,\\n    uint256 _nonce\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_to, _tokenId, _amount, _nonce));\\n  }\\n\\n  function _exists(uint256 _id) internal view returns (bool) {\\n    return (bytes(idToUri[_id]).length > 0);\\n  }\\n\\n  function _nextId() internal returns (uint256) {\\n    id.increment();\\n    return id.current();\\n  }\\n\\n  function _verify(bytes32 messageHash, bytes memory signature)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();\\n    return ethSignedMessageHash.recover(signature) == signer;\\n  }\\n}\\n\",\"keccak256\":\"0x92e3e93997d7cbf999b426de15aec1cf217237f5640d1fbcbd02ca22745d8f18\",\"license\":\"MIT\"},\"contracts/Interface/ICybertinoCanvas.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ICybertinoCanvas {\\n  /**\\n   * @dev Slightly different from TransferSingle event, emitted when `value`\\n   * tokens of token type `id` are minted to `to` by `operator` with platform's\\n   * nonce `nonce`.\\n   */\\n  event CybertinoMint(\\n    address indexed operator,\\n    address indexed to,\\n    uint256 id,\\n    uint256 value,\\n    uint256 indexed nonce\\n  );\\n}\\n\",\"keccak256\":\"0x17a34185ade61d0d0f29de1063d1040fd7e2c318a01f29f350c2ece8a89c07f0\",\"license\":\"MIT\"},\"contracts/Interface/ILayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ILayer {\\n  function getLayer(uint256 id)\\n    external\\n    view\\n    returns (uint32 stateCount, uint32 currenctState);\\n}\\n\",\"keccak256\":\"0x49a2e6d2344403bd92b41bf1cc2105dc88c4e79d1d6a4fef833105cff8edde25\",\"license\":\"MIT\"},\"contracts/Storage/CybertinoCanvasStorageV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../Interface/ILayer.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\n\\n// Storage is append only and never to be modified\\n// To upgrade:\\n//\\n// contract InfluencerStorageV1 is InfluencerStorageV0 {...}\\n// contract InfluencerV1 is InfluencerStorageV1 ... {...}\\ncontract InfluencerStorageV0 {\\n  /**\\n   * @dev influencer name\\n   */\\n  string public name;\\n  /**\\n   * @dev collection symbol; token tracker symbol\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @dev The current id of NFTs. Auto increment.\\n   */\\n  CountersUpgradeable.Counter public id;\\n\\n  /**\\n   * @dev LayerToken stores layer contract address and layer token id\\n   */\\n  struct LayerToken {\\n      // layer contract address\\n      ILayer layer;\\n      // layer token id\\n      uint256 layerID;\\n  }\\n\\n  /**\\n   * Canvas consists of 1 or more layers\\n   */\\n  struct Canvas {\\n      // canvas id\\n      uint256 id;\\n      // The total number of layers\\n      uint256 layerCount;\\n      // all layer tokens\\n      mapping(uint256 => LayerToken) layerTokens;\\n  }\\n\\n\\n  /**\\n   * @dev tokenID to Canvas\\n   */\\n  mapping(uint256 => Canvas) public canvases;\\n\\n  /**\\n   * @dev Cybertino Platform signer\\n   */\\n  address public signer;\\n\\n  // TODO: multiple mapping or mapping of struct\\n  /**\\n   * @dev Mapping from token ID to token URI, excluding base uri\\n   */\\n  mapping(uint256 => string) internal idToUri;\\n\\n  /**\\n   * @dev Mapping from token ID to token max supply\\n   */\\n  mapping(uint256 => uint256) internal maxTokenSupply;\\n\\n  /**\\n   * @dev Mapping from token ID to token supply, how many minted\\n   */\\n  mapping(uint256 => uint256) internal tokenSupply;\\n\\n  /**\\n   * @dev Mapping from signature hash to boolean to prevent replay\\n   */\\n  mapping(bytes32 => bool) public executed;\\n\\n  /**\\n   * @dev Paused boolean is turned on in case of emergency.\\n   */\\n  bool public paused = false;\\n}\\n\",\"keccak256\":\"0x5ed7d6f70dc62f8a2f85c0ccc36cd3437501924322dcabe0ddaf42e9b68e1082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d95760003560e01c80638da5cb5b11610104578063b4d97578116100a2578063e985e9c511610071578063e985e9c514610447578063f242432a14610483578063f2fde38b14610496578063f440be04146104a957600080fd5b8063b4d97578146103c5578063bd85b039146103d8578063d7c4f92a146103f8578063d9d197a61461040b57600080fd5b8063a22cb465116100de578063a22cb46514610372578063a7ecd37e14610385578063a9fcfb3314610398578063af640d0f146103bb57600080fd5b80638da5cb5b14610338578063902b0f001461034957806395d89b411461036a57600080fd5b80632eb2c2d61161017c578063780c51bb1161014b578063780c51bb146102ea5780638456cb59146102fd578063869f7594146103055780638ccdf15c1461032557600080fd5b80632eb2c2d6146102a25780634e1273f4146102b55780635c975abb146102d5578063715018a6146102e257600080fd5b80630656abb3116101b85780630656abb31461023c57806306fdde031461024f5780630e89341c14610264578063238ac9331461027757600080fd5b8062fdd58e146101de57806301ffc9a71461020457806302fe530514610227575b600080fd5b6101f16101ec366004612794565b6104bc565b6040519081526020015b60405180910390f35b610217610212366004612978565b610555565b60405190151581526020016101fb565b61023a610235366004612a7c565b610578565b005b61023a61024a366004612ab6565b6105ae565b61025761066a565b6040516101fb9190612e2c565b610257610272366004612960565b6106f8565b60cd5461028a906001600160a01b031681565b6040516001600160a01b0390911681526020016101fb565b61023a6102b0366004612554565b61076a565b6102c86102c3366004612894565b610a34565b6040516101fb9190612df4565b60d2546102179060ff1681565b61023a610b95565b6101f16102f83660046129b0565b610c09565b61023a610e25565b6101f1610313366004612960565b600090815260cf602052604090205490565b61023a6103333660046127f9565b610e63565b6097546001600160a01b031661028a565b61035c610357366004612960565b6111b1565b6040516101fb929190612d9e565b610257611337565b61023a610380366004612763565b611344565b61023a6103933660046124f9565b61141b565b6102176103a6366004612960565b60d16020526000908152604090205460ff1681565b60cb546101f19081565b61023a6103d3366004612b3b565b611467565b6101f16103e6366004612960565b600090815260d0602052604090205490565b61023a610406366004612663565b611504565b610432610419366004612960565b60cc602052600090815260409020805460019091015482565b604080519283526020830191909152016101fb565b61021761045536600461251c565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61023a6104913660046125fd565b611648565b61023a6104a43660046124f9565b6117f5565b6101f16104b73660046127bf565b6118e0565b60006001600160a01b03831661052d5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982161580610572575061057282611937565b92915050565b6097546001600160a01b031633146105a25760405162461bcd60e51b815260040161052490612f64565b6105ab81611987565b50565b600054610100900460ff16806105c7575060005460ff16155b6105e35760405162461bcd60e51b815260040161052490612ecc565b600054610100900460ff16158015610605576000805461ffff19166101011790555b84516106189060c9906020880190612272565b50835161062c9060ca906020870190612272565b5060cd80546001600160a01b0319166001600160a01b038516179055610651826117f5565b8015610663576000805461ff00191690555b5050505050565b60c980546106779061305f565b80601f01602080910402602001604051908101604052809291908181526020018280546106a39061305f565b80156106f05780601f106106c5576101008083540402835291602001916106f0565b820191906000526020600020905b8154815290600101906020018083116106d357829003601f168201915b505050505081565b60606000610706600061199e565b9050805160001415610728575050604080516020810190915260008152919050565b8060ce600085815260200190815260200160002060405160200161074d929190612c4c565b604051602081830303815290604052915050919050565b50919050565b81518351146107cc5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610524565b6001600160a01b0384166107f25760405162461bcd60e51b815260040161052490612e87565b6001600160a01b03851633148061080e575061080e8533610455565b6108755760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610524565b3360005b84518110156109c65760008582815181106108a457634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106108d057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156109215760405162461bcd60e51b815260040161052490612f1a565b61092b8282613018565b6065600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816065600085815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109ab9190613000565b92505081905550505050806109bf906130c0565b9050610879565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610a16929190612e07565b60405180910390a4610a2c818787878787611a32565b505050505050565b60608151835114610a995760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610524565b600083516001600160401b03811115610ac257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610aeb578160200160208202803683370190505b50905060005b8451811015610b8d57610b52858281518110610b1d57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610b4557634e487b7160e01b600052603260045260246000fd5b60200260200101516104bc565b828281518110610b7257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610b86816130c0565b9050610af1565b509392505050565b6097546001600160a01b03163314610bbf5760405162461bcd60e51b815260040161052490612f64565b6097546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609780546001600160a01b0319169055565b6097546000906001600160a01b03163314610c365760405162461bcd60e51b815260040161052490612f64565b86610c835760405162461bcd60e51b815260206004820152601f60248201527f4572723a204d697373696e6720436f6e74656e74204964656e746966696572006044820152606401610524565b82610cda5760405162461bcd60e51b815260206004820152602160248201527f4572723a204d7573742068617665206174206c65617374206f6e65206c6179656044820152603960f91b6064820152608401610524565b610ce2611b9d565b600081815260cc602052604081208281556001018590559091505b83811015610d6b57848482818110610d2557634e487b7160e01b600052603260045260246000fd5b600085815260cc6020908152604080832087845260020190915290819020910292909201919050610d5682826131a8565b50819050610d63816130c0565b915050610cfd565b50610daf3382600089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bb492505050565b600081815260ce60205260409020610dc89089896122f6565b50600081815260cf60205260409020829055807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b610e05826106f8565b604051610e129190612e2c565b60405180910390a2979650505050505050565b6097546001600160a01b03163314610e4f5760405162461bcd60e51b815260040161052490612f64565b60d2805460ff19811660ff90911615179055565b60d25460ff1615610e9f5760405162461bcd60e51b815260206004820152600660248201526514185d5cd95960d21b6044820152606401610524565b610ea887611cb7565b610ef45760405162461bcd60e51b815260206004820152601b60248201527f437962657274696e6f43616e7661733a20696e76616c696420494400000000006044820152606401610524565b6001861015610f555760405162461bcd60e51b815260206004820152602760248201527f437962657274696e6f43616e7661733a206d757374206d696e74206174206c65604482015266617374206f6e6560c81b6064820152608401610524565b600087815260cf602090815260408083205460d090925290912054610f7b908890613000565b1115610fd55760405162461bcd60e51b815260206004820152602360248201527f437962657274696e6f43616e7661733a2065786365656473206d617820737570604482015262706c7960e81b6064820152608401610524565b6000610fe3898989896118e0565b600081815260d1602052604090205490915060ff16156110455760405162461bcd60e51b815260206004820152601f60248201527f437962657274696e6f43616e7661733a20616c7265616479206d696e746564006044820152606401610524565b6110858186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cdd92505050565b6110dc5760405162461bcd60e51b815260206004820152602260248201527f437962657274696e6f43616e7661733a20696e76616c6964207369676e617475604482015261726560f01b6064820152608401610524565b600081815260d16020908152604091829020805460ff191660011790558151601f8501829004820281018201909252838252611138918b918b918b918890889081908401838280828437600092019190915250611bb492505050565b600088815260d0602052604081208054899290611156908490613000565b90915550506040805189815260208101899052339188916001600160a01b038d169184917f3371a470b65adaccbbfff3b30557ce52af697d6131c10f13cb4c8f93de646a03910160405180910390a450505050505050505050565b600081815260cc6020526040812060018101546060928392916001600160401b038111156111ef57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611218578160200160208202803683370190505b509050600082600101546001600160401b0381111561124757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611270578160200160208202803683370190505b50905060005b836001015481101561132b57600081815260028501602052604090205483516001600160a01b03909116908490839081106112c157634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091018201526000828152600286019091526040902060010154825183908390811061130e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611323816130c0565b915050611276565b50909590945092505050565b60ca80546106779061305f565b336001600160a01b03831614156113af5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610524565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6097546001600160a01b031633146114455760405162461bcd60e51b815260040161052490612f64565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611480575060005460ff16155b61149c5760405162461bcd60e51b815260040161052490612ecc565b600054610100900460ff161580156114be576000805461ffff19166101011790555b6114c6611d62565b6114ce611d62565b6114d6611dcd565b6114df85611e7b565b6114eb868585856105ae565b8015610a2c576000805461ff0019169055505050505050565b60d25460ff16156115405760405162461bcd60e51b815260206004820152600660248201526514185d5cd95960d21b6044820152606401610524565b60005b8981101561163a576116288c8c8c8481811061156f57634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8581811061159657634e487b7160e01b600052603260045260246000fd5b905060200201358a8a868181106115bd57634e487b7160e01b600052603260045260246000fd5b905060200201358989878181106115e457634e487b7160e01b600052603260045260246000fd5b90506020028101906115f69190612f99565b89898981811061161657634e487b7160e01b600052603260045260246000fd5b90506020028101906103339190612f99565b80611632816130c0565b915050611543565b505050505050505050505050565b6001600160a01b03841661166e5760405162461bcd60e51b815260040161052490612e87565b6001600160a01b03851633148061168a575061168a8533610455565b6116e85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610524565b336117018187876116f888611ef0565b61066388611ef0565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156117445760405162461bcd60e51b815260040161052490612f1a565b61174e8482613018565b60008681526065602090815260408083206001600160a01b038c8116855292528083209390935588168152908120805486929061178c908490613000565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46117ec828888888888611f49565b50505050505050565b6097546001600160a01b0316331461181f5760405162461bcd60e51b815260040161052490612f64565b6001600160a01b0381166118845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610524565b6097546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3609780546001600160a01b0319166001600160a01b0392909216919091179055565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526054810183905260748101829052600090609401604051602081830303815290604052805190602001209050949350505050565b60006001600160e01b03198216636cdb3d1360e11b148061196857506001600160e01b031982166303a24d0760e21b145b8061057257506301ffc9a760e01b6001600160e01b0319831614610572565b805161199a906067906020840190612272565b5050565b6060606780546119ad9061305f565b80601f01602080910402602001604051908101604052809291908181526020018280546119d99061305f565b8015611a265780601f106119fb57610100808354040283529160200191611a26565b820191906000526020600020905b815481529060010190602001808311611a0957829003601f168201915b50505050509050919050565b6001600160a01b0384163b15610a2c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611a769089908990889088908890600401612cfb565b602060405180830381600087803b158015611a9057600080fd5b505af1925050508015611ac0575060408051601f3d908101601f19168201909252611abd91810190612994565b60015b611b6d57611acc613107565b806308c379a01415611b065750611ae161311f565b80611aec5750611b08565b8060405162461bcd60e51b81526004016105249190612e2c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610524565b6001600160e01b0319811663bc197c8160e01b146117ec5760405162461bcd60e51b815260040161052490612e3f565b6000611bad60cb80546001019055565b5060cb5490565b6001600160a01b038416611c145760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610524565b33611c25816000876116f888611ef0565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290611c57908490613000565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461066381600087878787611f49565b600081815260ce602052604081208054829190611cd39061305f565b9050119050919050565b600080611d37846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60cd549091506001600160a01b0316611d508285612013565b6001600160a01b031614949350505050565b600054610100900460ff1680611d7b575060005460ff16155b611d975760405162461bcd60e51b815260040161052490612ecc565b600054610100900460ff16158015611db9576000805461ffff19166101011790555b80156105ab576000805461ff001916905550565b600054610100900460ff1680611de6575060005460ff16155b611e025760405162461bcd60e51b815260040161052490612ecc565b600054610100900460ff16158015611e24576000805461ffff19166101011790555b609780546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156105ab576000805461ff001916905550565b600054610100900460ff1680611e94575060005460ff16155b611eb05760405162461bcd60e51b815260040161052490612ecc565b600054610100900460ff16158015611ed2576000805461ffff19166101011790555b611edb82611987565b801561199a576000805461ff00191690555050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f3857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610a2c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611f8d9089908990889088908890600401612d59565b602060405180830381600087803b158015611fa757600080fd5b505af1925050508015611fd7575060408051601f3d908101601f19168201909252611fd491810190612994565b60015b611fe357611acc613107565b6001600160e01b0319811663f23a6e6160e01b146117ec5760405162461bcd60e51b815260040161052490612e3f565b60008060008084516041141561203d5750505060208201516040830151606084015160001a6120b3565b84516040141561206b5750505060408201516020830151906001600160ff1b0381169060ff1c601b016120b3565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610524565b6120bf868285856120c9565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156121465760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610524565b8360ff16601b148061215b57508360ff16601c145b6121b25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610524565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612206573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166122695760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610524565b95945050505050565b82805461227e9061305f565b90600052602060002090601f0160209004810192826122a057600085556122e6565b82601f106122b957805160ff19168380011785556122e6565b828001600101855582156122e6579182015b828111156122e65782518255916020019190600101906122cb565b506122f292915061236a565b5090565b8280546123029061305f565b90600052602060002090601f01602090048101928261232457600085556122e6565b82601f1061233d5782800160ff198235161785556122e6565b828001600101855582156122e6579182015b828111156122e657823582559160200191906001019061234f565b5b808211156122f2576000815560010161236b565b803561238a816131de565b919050565b60008083601f8401126123a0578182fd5b5081356001600160401b038111156123b6578182fd5b6020830191508360208260051b85010111156123d157600080fd5b9250929050565b600082601f8301126123e8578081fd5b813560206123f582612fdd565b6040516124028282613094565b8381528281019150858301600585901b87018401881015612421578586fd5b855b8581101561243f57813584529284019290840190600101612423565b5090979650505050505050565b60008083601f84011261245d578182fd5b5081356001600160401b03811115612473578182fd5b6020830191508360208285010111156123d157600080fd5b600082601f83011261249b578081fd5b81356001600160401b038111156124b4576124b46130f1565b6040516124cb601f8301601f191660200182613094565b8181528460208386010111156124df578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561250a578081fd5b8135612515816131de565b9392505050565b6000806040838503121561252e578081fd5b8235612539816131de565b91506020830135612549816131de565b809150509250929050565b600080600080600060a0868803121561256b578081fd5b8535612576816131de565b94506020860135612586816131de565b935060408601356001600160401b03808211156125a1578283fd5b6125ad89838a016123d8565b945060608801359150808211156125c2578283fd5b6125ce89838a016123d8565b935060808801359150808211156125e3578283fd5b506125f08882890161248b565b9150509295509295909350565b600080600080600060a08688031215612614578081fd5b853561261f816131de565b9450602086013561262f816131de565b9350604086013592506060860135915060808601356001600160401b03811115612657578182fd5b6125f08882890161248b565b600080600080600080600080600080600060c08c8e031215612683578889fd5b61268c8c61237f565b9a506001600160401b038060208e013511156126a657898afd5b6126b68e60208f01358f0161238f565b909b50995060408d01358110156126cb578687fd5b6126db8e60408f01358f0161238f565b909950975060608d01358110156126f0578687fd5b6127008e60608f01358f0161238f565b909750955060808d0135811015612715578485fd5b6127258e60808f01358f0161238f565b909550935060a08d013581101561273a578283fd5b5061274b8d60a08e01358e0161238f565b81935080925050509295989b509295989b9093969950565b60008060408385031215612775578182fd5b8235612780816131de565b915060208301358015158114612549578182fd5b600080604083850312156127a6578182fd5b82356127b1816131de565b946020939093013593505050565b600080600080608085870312156127d4578182fd5b84356127df816131de565b966020860135965060408601359560600135945092505050565b60008060008060008060008060c0898b031215612814578182fd5b883561281f816131de565b975060208901359650604089013595506060890135945060808901356001600160401b038082111561284f578384fd5b61285b8c838d0161244c565b909650945060a08b0135915080821115612873578384fd5b506128808b828c0161244c565b999c989b5096995094979396929594505050565b600080604083850312156128a6578182fd5b82356001600160401b03808211156128bc578384fd5b818501915085601f8301126128cf578384fd5b813560206128dc82612fdd565b6040516128e98282613094565b8381528281019150858301600585901b870184018b1015612908578889fd5b8896505b8487101561293357803561291f816131de565b83526001969096019591830191830161290c565b5096505086013592505080821115612949578283fd5b50612956858286016123d8565b9150509250929050565b600060208284031215612971578081fd5b5035919050565b600060208284031215612989578081fd5b8135612515816131f3565b6000602082840312156129a5578081fd5b8151612515816131f3565b60008060008060008060006080888a0312156129ca578081fd5b87356001600160401b03808211156129e0578283fd5b6129ec8b838c0161244c565b909950975060208a0135915080821115612a04578283fd5b612a108b838c0161244c565b909750955060408a0135915080821115612a28578283fd5b818a0191508a601f830112612a3b578283fd5b813581811115612a49578384fd5b8b60208260061b8501011115612a5d578384fd5b6020830195508094505050506060880135905092959891949750929550565b600060208284031215612a8d578081fd5b81356001600160401b03811115612aa2578182fd5b612aae8482850161248b565b949350505050565b60008060008060808587031215612acb578182fd5b84356001600160401b0380821115612ae1578384fd5b612aed8883890161248b565b95506020870135915080821115612b02578384fd5b50612b0f8782880161248b565b9350506040850135612b20816131de565b91506060850135612b30816131de565b939692955090935050565b600080600080600060a08688031215612b52578283fd5b85356001600160401b0380821115612b68578485fd5b612b7489838a0161248b565b96506020880135915080821115612b89578485fd5b612b9589838a0161248b565b95506040880135915080821115612baa578485fd5b50612bb78882890161248b565b9350506060860135612bc8816131de565b91506080860135612bd8816131de565b809150509295509295909350565b6000815180845260208085019450808401835b83811015612c1557815187529582019590820190600101612bf9565b509495945050505050565b60008151808452612c3881602086016020860161302f565b601f01601f19169290920160200192915050565b600083516020612c5f828583890161302f565b8454918401918390600181811c9080831680612c7c57607f831692505b858310811415612c9a57634e487b7160e01b88526022600452602488fd5b808015612cae5760018114612cbf57612ceb565b60ff19851688528388019550612ceb565b60008b815260209020895b85811015612ce35781548a820152908401908801612cca565b505083880195505b50939a9950505050505050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612d2790830186612be6565b8281036060840152612d398186612be6565b90508281036080840152612d4d8185612c20565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612d9390830184612c20565b979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612de05781516001600160a01b031684529284019290840190600101612dbb565b505050838103828501526120bf8186612be6565b6020815260006125156020830184612be6565b604081526000612e1a6040830185612be6565b82810360208401526122698185612be6565b6020815260006125156020830184612c20565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e19843603018112612faf578283fd5b8301803591506001600160401b03821115612fc8578283fd5b6020019150368190038213156123d157600080fd5b60006001600160401b03821115612ff657612ff66130f1565b5060051b60200190565b60008219821115613013576130136130db565b500190565b60008282101561302a5761302a6130db565b500390565b60005b8381101561304a578181015183820152602001613032565b83811115613059576000848401525b50505050565b600181811c9082168061307357607f821691505b6020821081141561076457634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b03811182821017156130b9576130b96130f1565b6040525050565b60006000198214156130d4576130d46130db565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561311c57600481823e5160e01c5b90565b600060443d101561312d5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561315c57505050505090565b82850191508151818111156131745750505050505090565b843d870101602082850101111561318e5750505050505090565b61319d60208286010187613094565b509095945050505050565b81356131b3816131de565b81546001600160a01b0319166001600160a01b03919091161781556020919091013560019190910155565b6001600160a01b03811681146105ab57600080fd5b6001600160e01b0319811681146105ab57600080fdfea264697066735822122091c22d1bdc45fd2f3f46459f2d17e81d7ce41e0f63fe3b1efe1f98eb8fe5bdaa64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchMint(address,uint256[],uint256[],uint256[],bytes[],bytes[])": {
        "details": "Batch mints multiple different existing NFT types",
        "params": {
          "_amounts": "numbers of NFTs of same type to mint",
          "_data": "Data to pass if receiver is contract",
          "_ids": "IDs of the type of NFT to mint",
          "_nonces": "platform nounces to prevent replay",
          "_signatures": "Verified signatures granting _account an NFT",
          "_to": "Account to mint NFT to (i.e. the owner)"
        }
      },
      "createCanvas(string,bytes,(address,uint256)[],uint256)": {
        "details": "Creates a new Canvas type",
        "params": {
          "_cid": "Content identifier param _data Data to pass if receiver is contract"
        },
        "returns": {
          "_id": "the newly created token ID"
        }
      },
      "getLayerTokens(uint256)": {
        "details": "get Layer Token <address, id> pair, used to query token states with ILayer contracts"
      },
      "getMessageHash(address,uint256,uint256,uint256)": {
        "details": "Create message hash to be signed"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "maxSupply(uint256)": {
        "details": "Returns the max quantity for a token ID",
        "params": {
          "_id": "ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "mint(address,uint256,uint256,uint256,bytes,bytes)": {
        "details": "Mints an existing Canvas NFT",
        "params": {
          "_amount": "number of NFTs of same type to mint",
          "_data": "Data to pass if receiver is contract",
          "_id": "ID (i.e. type) of NFT to mint",
          "_nonce": "platform nounce to prevent replay",
          "_signature": "Verified signature granting _account an NFT",
          "_to": "Account to mint NFT to (i.e. the owner)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause or unpause the minting and creation of NFTs"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setURI(string)": {
        "details": "Sets a new URI for all token types"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID",
        "params": {
          "_id": "ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSigner(address)": {
        "details": "Update the signer"
      },
      "uri(uint256)": {
        "details": "Returns the uri of a token given its ID",
        "params": {
          "_id": "ID of the token to query"
        },
        "returns": {
          "_0": "uri of the token or an empty string if it does not exist"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchMint(address,uint256[],uint256[],uint256[],bytes[],bytes[])": {
        "notice": "Enforces a maximum of 1 minting event per account per NFT type"
      },
      "mint(address,uint256,uint256,uint256,bytes,bytes)": {
        "notice": "Enforces a maximum of 1 minting event per NFT type per account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 182,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 185,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2757,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3211,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 251,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 257,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 259,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1281,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 175,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4936,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 4939,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 4943,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "id",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Counter)2764_storage"
      },
      {
        "astId": 4965,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "canvases",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_struct(Canvas)4959_storage)"
      },
      {
        "astId": 4968,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "signer",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 4973,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "idToUri",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4978,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "maxTokenSupply",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4983,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4988,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "executed",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4992,
        "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
        "label": "paused",
        "offset": 0,
        "slot": "210",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILayer)4504": {
        "encoding": "inplace",
        "label": "contract ILayer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Canvas)4959_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InfluencerStorageV0.Canvas)",
        "numberOfBytes": "32",
        "value": "t_struct(Canvas)4959_storage"
      },
      "t_mapping(t_uint256,t_struct(LayerToken)4949_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InfluencerStorageV0.LayerToken)",
        "numberOfBytes": "32",
        "value": "t_struct(LayerToken)4949_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Canvas)4959_storage": {
        "encoding": "inplace",
        "label": "struct InfluencerStorageV0.Canvas",
        "members": [
          {
            "astId": 4951,
            "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4953,
            "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
            "label": "layerCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4958,
            "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
            "label": "layerTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(LayerToken)4949_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Counter)2764_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2763,
            "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LayerToken)4949_storage": {
        "encoding": "inplace",
        "label": "struct InfluencerStorageV0.LayerToken",
        "members": [
          {
            "astId": 4946,
            "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
            "label": "layer",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ILayer)4504"
          },
          {
            "astId": 4948,
            "contract": "contracts/CybertinoCanvas/CybertinoCanvasV0.sol:CybertinoCanvasV0",
            "label": "layerID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}