{
  "address": "0xD6EF7AD12dB8620E8A4e6f1c2897304517A31BE0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract ILayer",
              "name": "layer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "layerID",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct InfluencerStorageV0.LayerToken[]",
          "name": "layerTokens",
          "type": "tuple[]"
        }
      ],
      "name": "CanvasCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "canvasID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract ILayer",
              "name": "layer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "layerID",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct InfluencerStorageV0.LayerToken",
          "name": "layerToken",
          "type": "tuple"
        }
      ],
      "name": "LayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "canvasID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract ILayer",
              "name": "layer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "layerID",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct InfluencerStorageV0.LayerToken",
          "name": "layerToken",
          "type": "tuple"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum InfluencerStorageV0.ProposalState",
          "name": "from",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum InfluencerStorageV0.ProposalState",
          "name": "to",
          "type": "uint8"
        }
      ],
      "name": "ProposalStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "Influencer_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "Influencer_init_unchained",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "canvasID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract ILayer",
              "name": "layer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "layerID",
              "type": "uint256"
            }
          ],
          "internalType": "struct InfluencerStorageV0.LayerToken",
          "name": "layerToken",
          "type": "tuple"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "approvesProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "cancelProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canvasCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract ILayer",
              "name": "layer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "layerID",
              "type": "uint256"
            }
          ],
          "internalType": "struct InfluencerStorageV0.LayerToken[]",
          "name": "tokens",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "createCanvas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "executesProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "grantManagerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "canvasID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract ILayer",
              "name": "layer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "layerID",
              "type": "uint256"
            }
          ],
          "internalType": "struct InfluencerStorageV0.LayerToken",
          "name": "layerToken",
          "type": "tuple"
        },
        {
          "internalType": "enum InfluencerStorageV0.ProposalState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "rejectsProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "revokeManagerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x299ad699f3273abdb1782fd167eae44a88e3273eb0638f9416f493ce53d518f6",
  "receipt": {
    "to": null,
    "from": "0xaf5144eCca7B93F58Fb4239d052c73e9063Ca3af",
    "contractAddress": "0xD6EF7AD12dB8620E8A4e6f1c2897304517A31BE0",
    "transactionIndex": 9,
    "gasUsed": "2880063",
    "logsBloom": "0x
    "blockHash": "0x4a3d85ed4f0b55afc75da0939babfdad22d1b0a44081f19b65f77a43dd0278f4",
    "transactionHash": "0x299ad699f3273abdb1782fd167eae44a88e3273eb0638f9416f493ce53d518f6",
    "logs": [],
    "blockNumber": 8781846,
    "cumulativeGasUsed": "3611808",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "473391cb9f023ec74f64261510b96416",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILayer\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerID\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct InfluencerStorageV0.LayerToken[]\",\"name\":\"layerTokens\",\"type\":\"tuple[]\"}],\"name\":\"CanvasCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILayer\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerID\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct InfluencerStorageV0.LayerToken\",\"name\":\"layerToken\",\"type\":\"tuple\"}],\"name\":\"LayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canvasID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILayer\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerID\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct InfluencerStorageV0.LayerToken\",\"name\":\"layerToken\",\"type\":\"tuple\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum InfluencerStorageV0.ProposalState\",\"name\":\"from\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum InfluencerStorageV0.ProposalState\",\"name\":\"to\",\"type\":\"uint8\"}],\"name\":\"ProposalStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"Influencer_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"Influencer_init_unchained\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"canvasID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILayer\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerID\",\"type\":\"uint256\"}],\"internalType\":\"struct InfluencerStorageV0.LayerToken\",\"name\":\"layerToken\",\"type\":\"tuple\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"approvesProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canvasCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract ILayer\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerID\",\"type\":\"uint256\"}],\"internalType\":\"struct InfluencerStorageV0.LayerToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createCanvas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"executesProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"grantManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"canvasID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILayer\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerID\",\"type\":\"uint256\"}],\"internalType\":\"struct InfluencerStorageV0.LayerToken\",\"name\":\"layerToken\",\"type\":\"tuple\"},{\"internalType\":\"enum InfluencerStorageV0.ProposalState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"rejectsProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CanvasCreated(uint256,(address,uint256)[])\":{\"details\":\"Emitted when Canvas of id `id` is created with `layerInfos`.\"},\"LayerAdded(uint256,(address,uint256))\":{\"details\":\"Emitted when a new layer token is added to a canvas\"},\"ProposalCreated(uint256,address,uint256,(address,uint256))\":{\"details\":\"Emitted when a new Proposal is created by `proposer` to add `layer` to Canvas of id `canvasID`.\"},\"ProposalStateChanged(uint256,uint8,uint8)\":{\"details\":\"Emitted when a Proposal of `id` changed state from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"addProposal(uint256,(address,uint256))\":{\"details\":\"Creates new proposal to add `layer` to canvas of id `canvasID`\"},\"approvesProposal(uint256)\":{\"details\":\"Approves a proposal of id `proposalID`\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"Destroys `amount` number of `tokenId` from `account`.\"},\"cancelProposal(uint256)\":{\"details\":\"Cancel a proposal of id `proposalID`\"},\"createCanvas(address,(address,uint256)[],uint256,bytes)\":{\"details\":\"create `amount` number of new canvas consiste of `layers` and tranfser to `to`\"},\"executesProposal(uint256)\":{\"details\":\"Executes a proposal of id `proposalID`\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantManagerRole(address)\":{\"details\":\"Grant `addr` Manager role\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Mints token `id` for `amount` quantity and transfers it to `to`. id must be already created canvas\"},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"details\":\"Mints batch of tokens `ids` for `amount` quantity and transfers it to `to`.\"},\"rejectsProposal(uint256)\":{\"details\":\"Rejects a proposal of id `proposalID`\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeManagerRole(address)\":{\"details\":\"Revoke `addr` Manager role\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setName(string)\":{\"details\":\"Sets influencer name to `newName`.\"},\"setURI(string)\":{\"details\":\"Sets a new URI for all token types\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Influencer/InfluencerV0.sol\":\"InfluencerV0\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155Upgradeable).interfaceId\\n            || interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x9bd2707e55ec6da4d7f9c763d2e78ae7a954019deb798ed5bf59862cf1064b32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xd841c561258151c3c22f05feb68c702fc414b112606bd72b848e8a65af128c30\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xa22cd3d499a04af4dbcc1b15877b69b611004ff02a2ab121e42226a6b6a88ab9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1d84970ad956bd24b298d0876ff96e1e2125daead8a6791c5c7753e83123b724\",\"license\":\"MIT\"},\"contracts/Influencer/InfluencerV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"../Storage/InfluencerStorageV0.sol\\\";\\nimport \\\"../Interface/IInfluencer.sol\\\";\\nimport \\\"../Interface/ILayer.sol\\\";\\n\\ncontract InfluencerV0 is\\n    IInfluencer,\\n    ERC1155Upgradeable,\\n    AccessControlUpgradeable,\\n    InfluencerStorageV0\\n{\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev Emitted when Canvas of id `id` is created with `layerInfos`.\\n     */\\n    event CanvasCreated(uint256 indexed id, LayerToken[] layerTokens);\\n\\n    /**\\n     * @dev Emitted when a new Proposal is created by `proposer` to add `layer` to Canvas of id `canvasID`.\\n     */\\n    event ProposalCreated(\\n        uint256 indexed id,\\n        address proposer,\\n        uint256 canvasID,\\n        LayerToken layerToken\\n    );\\n\\n    /**\\n     * @dev Emitted when a Proposal of `id` changed state from `from` to `to`.\\n     */\\n    event ProposalStateChanged(\\n        uint256 indexed id,\\n        ProposalState from,\\n        ProposalState to\\n    );\\n\\n    /**\\n     * @dev Emitted when a new layer token is added to a canvas\\n     */\\n    event LayerAdded(uint256 indexed canvasID, LayerToken layerToken);\\n\\n    function Influencer_init(string memory newName, string memory uri)\\n        public\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __ERC1155_init_unchained(uri);\\n        Influencer_init_unchained(newName);\\n    }\\n\\n    function Influencer_init_unchained(string memory newName)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n        _setName(newName);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IInfluencer).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets influencer name to `newName`.\\n     */\\n    function setName(string memory newName) public onlyManager {\\n        name = newName;\\n    }\\n\\n    /**\\n     * @dev internal set name\\n     */\\n    function _setName(string memory newName) internal {\\n        name = newName;\\n    }\\n\\n    /**\\n     * @dev create `amount` number of new canvas consiste of `layers` and tranfser to `to`\\n     */\\n    function createCanvas(\\n        address to,\\n        LayerToken[] memory tokens,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyManager {\\n        uint256 canvasID = canvasCount;\\n        canvases[canvasID].id = canvasID;\\n        canvases[canvasID].layerCount = tokens.length;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            canvases[canvasID].layerTokens[i] = tokens[i];\\n        }\\n\\n        _mint(to, canvasID, amount, data);\\n        canvasCount++;\\n\\n        emit CanvasCreated(canvasID, tokens);\\n    }\\n\\n    /**\\n     * @dev Mints token `id` for `amount` quantity and transfers it to `to`.\\n     * id must be already created canvas\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyManager validCanvasId(id) {\\n        require(id < canvasCount, \\\"canvas is not created\\\");\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev Mints batch of tokens `ids` for `amount` quantity and transfers it to `to`.\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyManager validCanvasIds(ids) {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` number of `tokenId` from `account`.\\n     */\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyManager validCanvasId(id) {\\n        _burn(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev Creates new proposal to add `layer` to canvas of id `canvasID`\\n     */\\n    function addProposal(uint256 canvasID, LayerToken memory layerToken)\\n        public\\n        validCanvasId(canvasID)\\n    {\\n        uint256 proposalID = proposalCount;\\n        Proposal memory p =\\n            Proposal(\\n                proposalID,\\n                msg.sender,\\n                canvasID,\\n                layerToken,\\n                ProposalState.Pending\\n            );\\n        proposals[proposalID] = p;\\n\\n        proposalCount++;\\n        emit ProposalCreated(proposalID, msg.sender, canvasID, layerToken);\\n    }\\n\\n    /**\\n     * @dev Cancel a proposal of id `proposalID`\\n     */\\n    function cancelProposal(uint256 proposalID)\\n        public\\n        validProposalId(proposalID)\\n        ensureProposalState(proposalID, ProposalState.Pending)\\n    {\\n        Proposal storage p = proposals[proposalID];\\n        require(p.proposer == msg.sender, \\\"only original proposer can cancel\\\");\\n        p.state = ProposalState.Canceled;\\n\\n        emit ProposalStateChanged(\\n            proposalID,\\n            ProposalState.Pending,\\n            ProposalState.Canceled\\n        );\\n    }\\n\\n    /**\\n     * @dev Approves a proposal of id `proposalID`\\n     */\\n    function approvesProposal(uint256 proposalID)\\n        public\\n        onlyManager()\\n        validProposalId(proposalID)\\n        ensureProposalState(proposalID, ProposalState.Pending)\\n    {\\n        Proposal storage p = proposals[proposalID];\\n        p.state = ProposalState.Approved;\\n\\n        emit ProposalStateChanged(\\n            proposalID,\\n            ProposalState.Pending,\\n            ProposalState.Approved\\n        );\\n    }\\n\\n    /**\\n     * @dev Rejects a proposal of id `proposalID`\\n     */\\n    function rejectsProposal(uint256 proposalID)\\n        public\\n        onlyManager()\\n        validProposalId(proposalID)\\n        ensureProposalState(proposalID, ProposalState.Pending)\\n    {\\n        Proposal storage p = proposals[proposalID];\\n        p.state = ProposalState.Rejected;\\n\\n        emit ProposalStateChanged(\\n            proposalID,\\n            ProposalState.Pending,\\n            ProposalState.Rejected\\n        );\\n    }\\n\\n    /**\\n     * @dev Executes a proposal of id `proposalID`\\n     */\\n    function executesProposal(uint256 proposalID)\\n        public\\n        validProposalId(proposalID)\\n        ensureProposalState(proposalID, ProposalState.Approved)\\n    {\\n        Proposal storage p = proposals[proposalID];\\n        Canvas storage c = canvases[p.canvasID];\\n        uint256 layerID = c.layerCount;\\n        c.layerTokens[layerID] = p.layerToken;\\n\\n        c.layerCount++;\\n        p.state = ProposalState.Executed;\\n\\n        emit LayerAdded(p.canvasID, p.layerToken);\\n        emit ProposalStateChanged(\\n            proposalID,\\n            ProposalState.Pending,\\n            ProposalState.Executed\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types\\n     */\\n    function setURI(string memory uri) public onlyManager {\\n        _setURI(uri);\\n    }\\n\\n    /**\\n     * @dev Grant `addr` Manager role\\n     */\\n    function grantManagerRole(address addr) public override {\\n        grantRole(MANAGER_ROLE, addr);\\n    }\\n\\n    /**\\n     * @dev Revoke `addr` Manager role\\n     */\\n    function revokeManagerRole(address addr) public override {\\n        grantRole(MANAGER_ROLE, addr);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"manager only\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if canvas `id` does not exist\\n     */\\n    modifier validCanvasId(uint256 id) {\\n        require(id < canvasCount, \\\"canvas is not created\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if any of the `ids` does not exist\\n     */\\n    modifier validCanvasIds(uint256[] memory ids) {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(ids[i] < canvasCount, \\\"canvas is not created\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if proposal of id `proposalID` is not in `state`\\n     */\\n    modifier ensureProposalState(uint256 proposalID, ProposalState state) {\\n        require(proposals[proposalID].state == state, \\\"invalid state\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if proposal of id `proposalID` is not in `state`\\n     */\\n    modifier validProposalId(uint256 proposalID) {\\n        require(proposalID < proposalCount, \\\"invalid proposal id\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc1c183faf2b762b495a0d883149d0f9eb56feba775293bbc46e140752e9c1991\",\"license\":\"MIT\"},\"contracts/Interface/IInfluencer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IInfluencer {\\n    /**\\n     * @dev Grant `addr` Manager role\\n     */\\n    function grantManagerRole(address addr) external;\\n\\n    /**\\n     * @dev Revoke `addr` Manager role\\n     */\\n    function revokeManagerRole(address addr) external;\\n}\\n\",\"keccak256\":\"0x4d8f585bb8e7725c975d325869081b5ba61a6569d3faee3a4b6dc643b8349f13\",\"license\":\"MIT\"},\"contracts/Interface/ILayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ILayer {\\n    function getLayer(uint256 id)\\n        external\\n        view\\n        returns (uint32 maxState, uint32 currencyState);\\n}\\n\",\"keccak256\":\"0xd5ea4967488b498350b261c9d16f25609f6c3ed660e0fa4857d41ecb90abd54c\",\"license\":\"MIT\"},\"contracts/Storage/InfluencerStorageV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../Interface/ILayer.sol\\\";\\n\\n// Storage is append only and never to be modified\\n// To upgrade:\\n//\\n// contract InfluencerStorageV1 is InfluencerStorageV0 {...}\\n// contract InfluencerV1 is InfluencerStorageV1 ... {...}\\ncontract InfluencerStorageV0 {\\n    /**\\n     * @dev influencer name\\n     */\\n    string public name;\\n\\n    /**\\n     * @dev manager role\\n     */\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /**\\n     * @dev LayerToken stores layer contract address and layer token id\\n     */\\n    struct LayerToken {\\n        // layer contract address\\n        ILayer layer;\\n        // layer token id\\n        uint256 layerID;\\n    }\\n\\n    /**\\n     * Canvas consists of 1 or more layers\\n     */\\n    struct Canvas {\\n        // canvas id\\n        uint256 id;\\n        // The total number of layers\\n        uint256 layerCount;\\n        // all layer tokens\\n        mapping(uint256 => LayerToken) layerTokens;\\n    }\\n\\n    /**\\n     * @dev The total number of canvas\\n     */\\n    uint256 public canvasCount;\\n\\n    /**\\n     * @dev tokenID to Canvas\\n     */\\n    mapping(uint256 => Canvas) canvases;\\n\\n    /**\\n     * User proposal to add new layers to an existing canvas\\n     */\\n    struct Proposal {\\n        // proposal id\\n        uint256 id;\\n        // proposer who created the proposal\\n        address proposer;\\n        // the canvas id to add layer to\\n        uint256 canvasID;\\n        // Layer info\\n        LayerToken layerToken;\\n        // proposal state\\n        ProposalState state;\\n    }\\n\\n    /**\\n     * @dev The total number of proposals\\n     */\\n    uint256 public proposalCount;\\n\\n    /*\\n     * @dev Possible states that a proposal may be in\\n     */\\n    enum ProposalState {Pending, Canceled, Approved, Rejected, Executed}\\n\\n    /*\\n     * @dev stores all user proposals\\n     */\\n    mapping(uint256 => Proposal) public proposals;\\n}\\n\",\"keccak256\":\"0x614e705bb66ffd62de28a352a8d10304c3630b6ce18674f19282194d85a2efb8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613320806100206000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c8063731133e91161011a578063cb57c18c116100ad578063e0a8f6f51161007c578063e0a8f6f5146104a5578063e985e9c5146104b8578063ec87621c146104f4578063f242432a14610509578063f5298aca1461051c57600080fd5b8063cb57c18c14610463578063d547741f14610476578063d5ea4e9d14610489578063da35c6641461049c57600080fd5b8063a22cb465116100e9578063a22cb4651461042a578063b75854ac1461043d578063be4dc94f1461033b578063c47f00271461045057600080fd5b8063731133e9146103e957806391d14854146103fc578063a055dad71461040f578063a217fddf1461042257600080fd5b806326e885e31161019d57806336568abe1161016c57806336568abe146103875780634e1273f41461039a5780634f6d39ce146103ba57806353a0f208146103c35780635433e7b4146103d657600080fd5b806326e885e31461033b578063289bab361461034e5780632eb2c2d6146103615780632f2ff15d1461037457600080fd5b806306fdde03116101d957806306fdde03146102dd5780630e89341c146102f25780631f7fdffa14610305578063248a9ca31461031857600080fd5b8062fdd58e1461020a578063013cf08b1461023057806301ffc9a7146102a557806302fe5305146102c8575b600080fd5b61021d61021836600461287c565b61052f565b6040519081526020015b60405180910390f35b61029461023e3660046129fb565b60cd60209081526000918252604091829020805460018201546002830154855180870190965260038401546001600160a01b03908116875260048501549587019590955260059093015491949316929060ff1685565b604051610227959493929190613028565b6102b86102b3366004612a37565b6105c8565b6040519015158152602001610227565b6102db6102d6366004612a6f565b6105f3565b005b6102e5610633565b6040516102279190612dbe565b6102e56103003660046129fb565b6106c1565b6102db6103133660046127c1565b610755565b61021d6103263660046129fb565b60009081526097602052604090206001015490565b6102db610349366004612576565b610804565b6102db61035c3660046126d9565b61081c565b6102db61036f3660046125ca565b610952565b6102db610382366004612a13565b610bdb565b6102db610395366004612a13565b610c06565b6103ad6103a836600461292f565b610c84565b6040516102279190612d62565b61021d60ca5481565b6102db6103d13660046129fb565b610de5565b6102db6103e4366004612aff565b610ed6565b6102db6103f73660046128db565b611007565b6102b861040a366004612a13565b61108a565b6102db61041d366004612aa9565b6110b5565b61021d600081565b6102db61043836600461284b565b61114c565b6102db61044b3660046129fb565b611223565b6102db61045e366004612a6f565b611314565b6102db610471366004612a6f565b61135b565b6102db610484366004612a13565b6113f3565b6102db6104973660046129fb565b611419565b61021d60cc5481565b6102db6104b33660046129fb565b611597565b6102b86104c6366004612592565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61021d6000805160206132cb83398151915281565b6102db610517366004612673565b6116b5565b6102db61052a3660046128a7565b611862565b60006001600160a01b0383166105a05760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216632629532b60e21b14806105ed57506105ed826118c9565b92915050565b61060b6000805160206132cb8339815191523361108a565b6106275760405162461bcd60e51b815260040161059790612f52565b610630816118ee565b50565b60c9805461064090613130565b80601f016020809104026020016040519081016040528092919081815260200182805461066c90613130565b80156106b95780601f1061068e576101008083540402835291602001916106b9565b820191906000526020600020905b81548152906001019060200180831161069c57829003601f168201915b505050505081565b6060606780546106d090613130565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90613130565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b50505050509050919050565b61076d6000805160206132cb8339815191523361108a565b6107895760405162461bcd60e51b815260040161059790612f52565b8260005b81518110156107f05760ca548282815181106107b957634e487b7160e01b600052603260045260246000fd5b6020026020010151106107de5760405162461bcd60e51b815260040161059790612e46565b806107e881613197565b91505061078d565b506107fd85858585611901565b5050505050565b6106306000805160206132cb83398151915282610bdb565b6108346000805160206132cb8339815191523361108a565b6108505760405162461bcd60e51b815260040161059790612f52565b60ca54600081815260cb6020526040812082815585516001909101555b84518110156108f15784818151811061089657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260cb8352604080822085835260020184529020815181546001600160a01b0319166001600160a01b03909116178155910151600190910155806108e981613197565b91505061086d565b506108fe85828585611a69565b60ca805490600061090e83613197565b9190505550807f172fedff8e8a3c6ba1a3351721d721a6d92b092ba31265dc02a121ecbe37051d856040516109439190612d02565b60405180910390a25050505050565b81518351146109735760405162461bcd60e51b815260040161059790612f9f565b6001600160a01b0384166109995760405162461bcd60e51b815260040161059790612e75565b6001600160a01b0385163314806109b557506109b585336104c6565b610a1c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610597565b3360005b8451811015610b6d576000858281518110610a4b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610a7757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015610ac85760405162461bcd60e51b815260040161059790612f08565b610ad282826130d6565b6065600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816065600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b52919061309f565b9250508190555050505080610b6690613197565b9050610a20565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610bbd929190612d75565b60405180910390a4610bd3818787878787611b32565b505050505050565b600082815260976020526040902060010154610bf78133611c9d565b610c018383611d01565b505050565b6001600160a01b0381163314610c765760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610597565b610c808282611d87565b5050565b60608151835114610ce95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610597565b600083516001600160401b03811115610d1257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d3b578160200160208202803683370190505b50905060005b8451811015610ddd57610da2858281518110610d6d57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610d9557634e487b7160e01b600052603260045260246000fd5b602002602001015161052f565b828281518110610dc257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610dd681613197565b9050610d41565b509392505050565b610dfd6000805160206132cb8339815191523361108a565b610e195760405162461bcd60e51b815260040161059790612f52565b8060cc548110610e3b5760405162461bcd60e51b815260040161059790612e19565b81600080600083815260cd602052604090206005015460ff166004811115610e7357634e487b7160e01b600052602160045260246000fd5b14610e905760405162461bcd60e51b815260040161059790612f78565b600084815260cd602052604090206005810180546003919060ff19166001830217905550846000805160206132ab83398151915260006003604051610943929190612da3565b8160ca548110610ef85760405162461bcd60e51b815260040161059790612e46565b60cc546040805160a0810182528281523360208083019182528284018881526060840188815260006080860181815288825260cd8552969020855181559351600180860180546001600160a01b039384166001600160a01b03199182161790915593516002870155915180516003870180549190931694169390931790559101516004808401919091559351600583018054949586959293919260ff191691908490811115610fb757634e487b7160e01b600052602160045260246000fd5b02179055505060cc805491506000610fce83613197565b9190505550817f027ac651135cc188c67201990d251970f41422c4d86b447b14aff60e4fd9f80433878760405161094393929190612ccb565b61101f6000805160206132cb8339815191523361108a565b61103b5760405162461bcd60e51b815260040161059790612f52565b8260ca54811061105d5760405162461bcd60e51b815260040161059790612e46565b60ca54841061107e5760405162461bcd60e51b815260040161059790612e46565b6107fd85858585611a69565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff16806110ce575060005460ff16155b6110ea5760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff1615801561110c576000805461ffff19166101011790555b611114611dee565b61111c611dee565b611124611dee565b61112d82611e59565b6111368361135b565b8015610c01576000805461ff0019169055505050565b336001600160a01b03831614156111b75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610597565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61123b6000805160206132cb8339815191523361108a565b6112575760405162461bcd60e51b815260040161059790612f52565b8060cc5481106112795760405162461bcd60e51b815260040161059790612e19565b81600080600083815260cd602052604090206005015460ff1660048111156112b157634e487b7160e01b600052602160045260246000fd5b146112ce5760405162461bcd60e51b815260040161059790612f78565b600084815260cd602052604090206005810180546002919060ff19166001830217905550846000805160206132ab83398151915260006002604051610943929190612da3565b61132c6000805160206132cb8339815191523361108a565b6113485760405162461bcd60e51b815260040161059790612f52565b8051610c809060c99060208401906123a4565b600054610100900460ff1680611374575060005460ff16155b6113905760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff161580156113b2576000805461ffff19166101011790555b6113bd600033611eb9565b6113d56000805160206132cb83398151915233611eb9565b6113de82611348565b8015610c80576000805461ff00191690555050565b60008281526097602052604090206001015461140f8133611c9d565b610c018383611d87565b8060cc54811061143b5760405162461bcd60e51b815260040161059790612e19565b81600280600083815260cd602052604090206005015460ff16600481111561147357634e487b7160e01b600052602160045260246000fd5b146114905760405162461bcd60e51b815260040161059790612f78565b600084815260cd60209081526040808320600280820154855260cb845282852060018082018054808952938301909652938620600384015481546001600160a01b0319166001600160a01b03909116178155600484015494019390935583549194929390926114fe83613197565b909155505060058301805460ff1916600490811790915560028401546040805160038701546001600160a01b0316815292860154602084015290917f0427f38df7e5490e6de081c035724d38227f33457a6cb6e4b97557c8e9c4ab7f910160405180910390a2866000805160206132ab83398151915260006004604051611586929190612da3565b60405180910390a250505050505050565b8060cc5481106115b95760405162461bcd60e51b815260040161059790612e19565b81600080600083815260cd602052604090206005015460ff1660048111156115f157634e487b7160e01b600052602160045260246000fd5b1461160e5760405162461bcd60e51b815260040161059790612f78565b600084815260cd6020526040902060018101546001600160a01b031633146116825760405162461bcd60e51b815260206004820152602160248201527f6f6e6c79206f726967696e616c2070726f706f7365722063616e2063616e63656044820152601b60fa1b6064820152608401610597565b60058101805460ff1916600190811790915560405186916000805160206132ab8339815191529161094391600091612da3565b6001600160a01b0384166116db5760405162461bcd60e51b815260040161059790612e75565b6001600160a01b0385163314806116f757506116f785336104c6565b6117555760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610597565b3361176e81878761176588611ec3565b6107fd88611ec3565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156117b15760405162461bcd60e51b815260040161059790612f08565b6117bb84826130d6565b60008681526065602090815260408083206001600160a01b038c811685529252808320939093558816815290812080548692906117f990849061309f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611859828888888888611f1c565b50505050505050565b61187a6000805160206132cb8339815191523361108a565b6118965760405162461bcd60e51b815260040161059790612f52565b8160ca5481106118b85760405162461bcd60e51b815260040161059790612e46565b6118c3848484611fe6565b50505050565b60006001600160e01b03198216637965db0b60e01b14806105ed57506105ed8261216c565b8051610c809060679060208401906123a4565b6001600160a01b0384166119275760405162461bcd60e51b815260040161059790612fe7565b81518351146119485760405162461bcd60e51b815260040161059790612f9f565b3360005b8451811015611a015783818151811061197557634e487b7160e01b600052603260045260246000fd5b6020026020010151606560008784815181106119a157634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546119e9919061309f565b909155508190506119f981613197565b91505061194c565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a52929190612d75565b60405180910390a46107fd81600087878787611b32565b6001600160a01b038416611a8f5760405162461bcd60e51b815260040161059790612fe7565b33611aa08160008761176588611ec3565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290611ad290849061309f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46107fd81600087878787611f1c565b6001600160a01b0384163b15610bd35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b769089908990889088908890600401612c28565b602060405180830381600087803b158015611b9057600080fd5b505af1925050508015611bc0575060408051601f3d908101601f19168201909252611bbd91810190612a53565b60015b611c6d57611bcc6131de565b806308c379a01415611c065750611be16131f6565b80611bec5750611c08565b8060405162461bcd60e51b81526004016105979190612dbe565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610597565b6001600160e01b0319811663bc197c8160e01b146118595760405162461bcd60e51b815260040161059790612dd1565b611ca7828261108a565b610c8057611cbf816001600160a01b031660146121bc565b611cca8360206121bc565b604051602001611cdb929190612bb3565b60408051601f198184030181529082905262461bcd60e51b825261059791600401612dbe565b611d0b828261108a565b610c805760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d433390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611d91828261108a565b15610c805760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611e07575060005460ff16155b611e235760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff16158015611e45576000805461ffff19166101011790555b8015610630576000805461ff001916905550565b600054610100900460ff1680611e72575060005460ff16155b611e8e5760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff16158015611eb0576000805461ffff19166101011790555b6113de826118ee565b610c808282611d01565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f0b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610bd35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611f609089908990889088908890600401612c86565b602060405180830381600087803b158015611f7a57600080fd5b505af1925050508015611faa575060408051601f3d908101601f19168201909252611fa791810190612a53565b60015b611fb657611bcc6131de565b6001600160e01b0319811663f23a6e6160e01b146118595760405162461bcd60e51b815260040161059790612dd1565b6001600160a01b0383166120485760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610597565b336120788185600061205987611ec3565b61206287611ec3565b5050604080516020810190915260009052505050565b60008381526065602090815260408083206001600160a01b0388168452909152902054828110156120f75760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610597565b61210183826130d6565b60008581526065602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216636cdb3d1360e11b148061219d57506001600160e01b031982166303a24d0760e21b145b806105ed57506301ffc9a760e01b6001600160e01b03198316146105ed565b606060006121cb8360026130b7565b6121d690600261309f565b6001600160401b038111156121fb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612225576020820181803683370190505b509050600360fc1b8160008151811061224e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061228b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122af8460026130b7565b6122ba90600161309f565b90505b600181111561234e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122fc57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061232057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361234781613119565b90506122bd565b50831561239d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610597565b9392505050565b8280546123b090613130565b90600052602060002090601f0160209004810192826123d25760008555612418565b82601f106123eb57805160ff1916838001178555612418565b82800160010185558215612418579182015b828111156124185782518255916020019190600101906123fd565b50612424929150612428565b5090565b5b808211156124245760008155600101612429565b600082601f83011261244d578081fd5b8135602061245a8261307c565b604051612467828261316b565b8381528281019150858301600585901b87018401881015612486578586fd5b855b858110156124a457813584529284019290840190600101612488565b5090979650505050505050565b600082601f8301126124c1578081fd5b81356001600160401b038111156124da576124da6131c8565b6040516124f1601f8301601f19166020018261316b565b818152846020838601011115612505578283fd5b816020850160208301379081016020019190915292915050565b600060408284031215612530578081fd5b604051604081018181106001600160401b0382111715612552576125526131c8565b60405290508082356125638161327f565b8152602092830135920191909152919050565b600060208284031215612587578081fd5b813561239d8161327f565b600080604083850312156125a4578081fd5b82356125af8161327f565b915060208301356125bf8161327f565b809150509250929050565b600080600080600060a086880312156125e1578081fd5b85356125ec8161327f565b945060208601356125fc8161327f565b935060408601356001600160401b0380821115612617578283fd5b61262389838a0161243d565b94506060880135915080821115612638578283fd5b61264489838a0161243d565b93506080880135915080821115612659578283fd5b50612666888289016124b1565b9150509295509295909350565b600080600080600060a0868803121561268a578081fd5b85356126958161327f565b945060208601356126a58161327f565b9350604086013592506060860135915060808601356001600160401b038111156126cd578182fd5b612666888289016124b1565b600080600080608085870312156126ee578182fd5b84356126f98161327f565b93506020858101356001600160401b0380821115612715578485fd5b818801915088601f830112612728578485fd5b81356127338161307c565b60408051612741838261316b565b8381528681019250858701600685901b870188018e101561276057898afd5b8996505b8487101561278a576127768e8261251f565b845260019690960195928701928201612764565b5098508a01359650505060608801359250808311156127a7578384fd5b50506127b5878288016124b1565b91505092959194509250565b600080600080608085870312156127d6578182fd5b84356127e18161327f565b935060208501356001600160401b03808211156127fc578384fd5b6128088883890161243d565b9450604087013591508082111561281d578384fd5b6128298883890161243d565b9350606087013591508082111561283e578283fd5b506127b5878288016124b1565b6000806040838503121561285d578182fd5b82356128688161327f565b9150602083013580151581146125bf578182fd5b6000806040838503121561288e578182fd5b82356128998161327f565b946020939093013593505050565b6000806000606084860312156128bb578081fd5b83356128c68161327f565b95602085013595506040909401359392505050565b600080600080608085870312156128f0578182fd5b84356128fb8161327f565b9350602085013592506040850135915060608501356001600160401b03811115612923578182fd5b6127b5878288016124b1565b60008060408385031215612941578182fd5b82356001600160401b0380821115612957578384fd5b818501915085601f83011261296a578384fd5b813560206129778261307c565b604051612984828261316b565b8381528281019150858301600585901b870184018b10156129a3578889fd5b8896505b848710156129ce5780356129ba8161327f565b8352600196909601959183019183016129a7565b50965050860135925050808211156129e4578283fd5b506129f18582860161243d565b9150509250929050565b600060208284031215612a0c578081fd5b5035919050565b60008060408385031215612a25578182fd5b8235915060208301356125bf8161327f565b600060208284031215612a48578081fd5b813561239d81613294565b600060208284031215612a64578081fd5b815161239d81613294565b600060208284031215612a80578081fd5b81356001600160401b03811115612a95578182fd5b612aa1848285016124b1565b949350505050565b60008060408385031215612abb578182fd5b82356001600160401b0380821115612ad1578384fd5b612add868387016124b1565b93506020850135915080821115612af2578283fd5b506129f1858286016124b1565b60008060608385031215612b11578182fd5b82359150612b22846020850161251f565b90509250929050565b6000815180845260208085019450808401835b83811015612b5a57815187529582019590820190600101612b3e565b509495945050505050565b60008151808452612b7d8160208601602086016130ed565b601f01601f19169290920160200192915050565b60058110612baf57634e487b7160e01b600052602160045260246000fd5b9052565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612beb8160178501602088016130ed565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c1c8160288401602088016130ed565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612c5490830186612b2b565b8281036060840152612c668186612b2b565b90508281036080840152612c7a8185612b65565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612cc090830184612b65565b979650505050505050565b6001600160a01b03841681526020810183905260808101612aa1604083018480516001600160a01b03168252602090810151910152565b602080825282518282018190526000919060409081850190868401855b82811015612d5557612d4584835180516001600160a01b03168252602090810151910152565b9284019290850190600101612d1f565b5091979650505050505050565b60208152600061239d6020830184612b2b565b604081526000612d886040830185612b2b565b8281036020840152612d9a8185612b2b565b95945050505050565b60408101612db18285612b91565b61239d6020830184612b91565b60208152600061239d6020830184612b65565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252601390820152721a5b9d985b1a59081c1c9bdc1bdcd85b081a59606a1b604082015260600190565b60208082526015908201527418d85b9d985cc81a5cc81b9bdd0818dc99585d1959605a1b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600c908201526b6d616e61676572206f6e6c7960a01b604082015260600190565b6020808252600d908201526c696e76616c696420737461746560981b604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8581526001600160a01b03851660208201526040810184905260c08101613065606083018580516001600160a01b03168252602090810151910152565b61307260a0830184612b91565b9695505050505050565b60006001600160401b03821115613095576130956131c8565b5060051b60200190565b600082198211156130b2576130b26131b2565b500190565b60008160001904831182151516156130d1576130d16131b2565b500290565b6000828210156130e8576130e86131b2565b500390565b60005b838110156131085781810151838201526020016130f0565b838111156118c35750506000910152565b600081613128576131286131b2565b506000190190565b600181811c9082168061314457607f821691505b6020821081141561316557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715613190576131906131c8565b6040525050565b60006000198214156131ab576131ab6131b2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156131f357600481823e5160e01c5b90565b600060443d10156132045790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561323357505050505090565b828501915081518181111561324b5750505050505090565b843d87010160208285010111156132655750505050505090565b6132746020828601018761316b565b509095945050505050565b6001600160a01b038116811461063057600080fd5b6001600160e01b03198116811461063057600080fdfe6147c657c509b611c5b884671c7cb0da0e1eed364b561e0e9d48789b79421525241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a264697066735822122080f24fb3b360fafd8ae8f94b74b985e19cf51896fe492418f611e1b8af451c5464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102055760003560e01c8063731133e91161011a578063cb57c18c116100ad578063e0a8f6f51161007c578063e0a8f6f5146104a5578063e985e9c5146104b8578063ec87621c146104f4578063f242432a14610509578063f5298aca1461051c57600080fd5b8063cb57c18c14610463578063d547741f14610476578063d5ea4e9d14610489578063da35c6641461049c57600080fd5b8063a22cb465116100e9578063a22cb4651461042a578063b75854ac1461043d578063be4dc94f1461033b578063c47f00271461045057600080fd5b8063731133e9146103e957806391d14854146103fc578063a055dad71461040f578063a217fddf1461042257600080fd5b806326e885e31161019d57806336568abe1161016c57806336568abe146103875780634e1273f41461039a5780634f6d39ce146103ba57806353a0f208146103c35780635433e7b4146103d657600080fd5b806326e885e31461033b578063289bab361461034e5780632eb2c2d6146103615780632f2ff15d1461037457600080fd5b806306fdde03116101d957806306fdde03146102dd5780630e89341c146102f25780631f7fdffa14610305578063248a9ca31461031857600080fd5b8062fdd58e1461020a578063013cf08b1461023057806301ffc9a7146102a557806302fe5305146102c8575b600080fd5b61021d61021836600461287c565b61052f565b6040519081526020015b60405180910390f35b61029461023e3660046129fb565b60cd60209081526000918252604091829020805460018201546002830154855180870190965260038401546001600160a01b03908116875260048501549587019590955260059093015491949316929060ff1685565b604051610227959493929190613028565b6102b86102b3366004612a37565b6105c8565b6040519015158152602001610227565b6102db6102d6366004612a6f565b6105f3565b005b6102e5610633565b6040516102279190612dbe565b6102e56103003660046129fb565b6106c1565b6102db6103133660046127c1565b610755565b61021d6103263660046129fb565b60009081526097602052604090206001015490565b6102db610349366004612576565b610804565b6102db61035c3660046126d9565b61081c565b6102db61036f3660046125ca565b610952565b6102db610382366004612a13565b610bdb565b6102db610395366004612a13565b610c06565b6103ad6103a836600461292f565b610c84565b6040516102279190612d62565b61021d60ca5481565b6102db6103d13660046129fb565b610de5565b6102db6103e4366004612aff565b610ed6565b6102db6103f73660046128db565b611007565b6102b861040a366004612a13565b61108a565b6102db61041d366004612aa9565b6110b5565b61021d600081565b6102db61043836600461284b565b61114c565b6102db61044b3660046129fb565b611223565b6102db61045e366004612a6f565b611314565b6102db610471366004612a6f565b61135b565b6102db610484366004612a13565b6113f3565b6102db6104973660046129fb565b611419565b61021d60cc5481565b6102db6104b33660046129fb565b611597565b6102b86104c6366004612592565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61021d6000805160206132cb83398151915281565b6102db610517366004612673565b6116b5565b6102db61052a3660046128a7565b611862565b60006001600160a01b0383166105a05760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216632629532b60e21b14806105ed57506105ed826118c9565b92915050565b61060b6000805160206132cb8339815191523361108a565b6106275760405162461bcd60e51b815260040161059790612f52565b610630816118ee565b50565b60c9805461064090613130565b80601f016020809104026020016040519081016040528092919081815260200182805461066c90613130565b80156106b95780601f1061068e576101008083540402835291602001916106b9565b820191906000526020600020905b81548152906001019060200180831161069c57829003601f168201915b505050505081565b6060606780546106d090613130565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90613130565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b50505050509050919050565b61076d6000805160206132cb8339815191523361108a565b6107895760405162461bcd60e51b815260040161059790612f52565b8260005b81518110156107f05760ca548282815181106107b957634e487b7160e01b600052603260045260246000fd5b6020026020010151106107de5760405162461bcd60e51b815260040161059790612e46565b806107e881613197565b91505061078d565b506107fd85858585611901565b5050505050565b6106306000805160206132cb83398151915282610bdb565b6108346000805160206132cb8339815191523361108a565b6108505760405162461bcd60e51b815260040161059790612f52565b60ca54600081815260cb6020526040812082815585516001909101555b84518110156108f15784818151811061089657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260cb8352604080822085835260020184529020815181546001600160a01b0319166001600160a01b03909116178155910151600190910155806108e981613197565b91505061086d565b506108fe85828585611a69565b60ca805490600061090e83613197565b9190505550807f172fedff8e8a3c6ba1a3351721d721a6d92b092ba31265dc02a121ecbe37051d856040516109439190612d02565b60405180910390a25050505050565b81518351146109735760405162461bcd60e51b815260040161059790612f9f565b6001600160a01b0384166109995760405162461bcd60e51b815260040161059790612e75565b6001600160a01b0385163314806109b557506109b585336104c6565b610a1c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610597565b3360005b8451811015610b6d576000858281518110610a4b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610a7757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015610ac85760405162461bcd60e51b815260040161059790612f08565b610ad282826130d6565b6065600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816065600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b52919061309f565b9250508190555050505080610b6690613197565b9050610a20565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610bbd929190612d75565b60405180910390a4610bd3818787878787611b32565b505050505050565b600082815260976020526040902060010154610bf78133611c9d565b610c018383611d01565b505050565b6001600160a01b0381163314610c765760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610597565b610c808282611d87565b5050565b60608151835114610ce95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610597565b600083516001600160401b03811115610d1257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d3b578160200160208202803683370190505b50905060005b8451811015610ddd57610da2858281518110610d6d57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610d9557634e487b7160e01b600052603260045260246000fd5b602002602001015161052f565b828281518110610dc257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610dd681613197565b9050610d41565b509392505050565b610dfd6000805160206132cb8339815191523361108a565b610e195760405162461bcd60e51b815260040161059790612f52565b8060cc548110610e3b5760405162461bcd60e51b815260040161059790612e19565b81600080600083815260cd602052604090206005015460ff166004811115610e7357634e487b7160e01b600052602160045260246000fd5b14610e905760405162461bcd60e51b815260040161059790612f78565b600084815260cd602052604090206005810180546003919060ff19166001830217905550846000805160206132ab83398151915260006003604051610943929190612da3565b8160ca548110610ef85760405162461bcd60e51b815260040161059790612e46565b60cc546040805160a0810182528281523360208083019182528284018881526060840188815260006080860181815288825260cd8552969020855181559351600180860180546001600160a01b039384166001600160a01b03199182161790915593516002870155915180516003870180549190931694169390931790559101516004808401919091559351600583018054949586959293919260ff191691908490811115610fb757634e487b7160e01b600052602160045260246000fd5b02179055505060cc805491506000610fce83613197565b9190505550817f027ac651135cc188c67201990d251970f41422c4d86b447b14aff60e4fd9f80433878760405161094393929190612ccb565b61101f6000805160206132cb8339815191523361108a565b61103b5760405162461bcd60e51b815260040161059790612f52565b8260ca54811061105d5760405162461bcd60e51b815260040161059790612e46565b60ca54841061107e5760405162461bcd60e51b815260040161059790612e46565b6107fd85858585611a69565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff16806110ce575060005460ff16155b6110ea5760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff1615801561110c576000805461ffff19166101011790555b611114611dee565b61111c611dee565b611124611dee565b61112d82611e59565b6111368361135b565b8015610c01576000805461ff0019169055505050565b336001600160a01b03831614156111b75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610597565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61123b6000805160206132cb8339815191523361108a565b6112575760405162461bcd60e51b815260040161059790612f52565b8060cc5481106112795760405162461bcd60e51b815260040161059790612e19565b81600080600083815260cd602052604090206005015460ff1660048111156112b157634e487b7160e01b600052602160045260246000fd5b146112ce5760405162461bcd60e51b815260040161059790612f78565b600084815260cd602052604090206005810180546002919060ff19166001830217905550846000805160206132ab83398151915260006002604051610943929190612da3565b61132c6000805160206132cb8339815191523361108a565b6113485760405162461bcd60e51b815260040161059790612f52565b8051610c809060c99060208401906123a4565b600054610100900460ff1680611374575060005460ff16155b6113905760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff161580156113b2576000805461ffff19166101011790555b6113bd600033611eb9565b6113d56000805160206132cb83398151915233611eb9565b6113de82611348565b8015610c80576000805461ff00191690555050565b60008281526097602052604090206001015461140f8133611c9d565b610c018383611d87565b8060cc54811061143b5760405162461bcd60e51b815260040161059790612e19565b81600280600083815260cd602052604090206005015460ff16600481111561147357634e487b7160e01b600052602160045260246000fd5b146114905760405162461bcd60e51b815260040161059790612f78565b600084815260cd60209081526040808320600280820154855260cb845282852060018082018054808952938301909652938620600384015481546001600160a01b0319166001600160a01b03909116178155600484015494019390935583549194929390926114fe83613197565b909155505060058301805460ff1916600490811790915560028401546040805160038701546001600160a01b0316815292860154602084015290917f0427f38df7e5490e6de081c035724d38227f33457a6cb6e4b97557c8e9c4ab7f910160405180910390a2866000805160206132ab83398151915260006004604051611586929190612da3565b60405180910390a250505050505050565b8060cc5481106115b95760405162461bcd60e51b815260040161059790612e19565b81600080600083815260cd602052604090206005015460ff1660048111156115f157634e487b7160e01b600052602160045260246000fd5b1461160e5760405162461bcd60e51b815260040161059790612f78565b600084815260cd6020526040902060018101546001600160a01b031633146116825760405162461bcd60e51b815260206004820152602160248201527f6f6e6c79206f726967696e616c2070726f706f7365722063616e2063616e63656044820152601b60fa1b6064820152608401610597565b60058101805460ff1916600190811790915560405186916000805160206132ab8339815191529161094391600091612da3565b6001600160a01b0384166116db5760405162461bcd60e51b815260040161059790612e75565b6001600160a01b0385163314806116f757506116f785336104c6565b6117555760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610597565b3361176e81878761176588611ec3565b6107fd88611ec3565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156117b15760405162461bcd60e51b815260040161059790612f08565b6117bb84826130d6565b60008681526065602090815260408083206001600160a01b038c811685529252808320939093558816815290812080548692906117f990849061309f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611859828888888888611f1c565b50505050505050565b61187a6000805160206132cb8339815191523361108a565b6118965760405162461bcd60e51b815260040161059790612f52565b8160ca5481106118b85760405162461bcd60e51b815260040161059790612e46565b6118c3848484611fe6565b50505050565b60006001600160e01b03198216637965db0b60e01b14806105ed57506105ed8261216c565b8051610c809060679060208401906123a4565b6001600160a01b0384166119275760405162461bcd60e51b815260040161059790612fe7565b81518351146119485760405162461bcd60e51b815260040161059790612f9f565b3360005b8451811015611a015783818151811061197557634e487b7160e01b600052603260045260246000fd5b6020026020010151606560008784815181106119a157634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546119e9919061309f565b909155508190506119f981613197565b91505061194c565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a52929190612d75565b60405180910390a46107fd81600087878787611b32565b6001600160a01b038416611a8f5760405162461bcd60e51b815260040161059790612fe7565b33611aa08160008761176588611ec3565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290611ad290849061309f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46107fd81600087878787611f1c565b6001600160a01b0384163b15610bd35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b769089908990889088908890600401612c28565b602060405180830381600087803b158015611b9057600080fd5b505af1925050508015611bc0575060408051601f3d908101601f19168201909252611bbd91810190612a53565b60015b611c6d57611bcc6131de565b806308c379a01415611c065750611be16131f6565b80611bec5750611c08565b8060405162461bcd60e51b81526004016105979190612dbe565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610597565b6001600160e01b0319811663bc197c8160e01b146118595760405162461bcd60e51b815260040161059790612dd1565b611ca7828261108a565b610c8057611cbf816001600160a01b031660146121bc565b611cca8360206121bc565b604051602001611cdb929190612bb3565b60408051601f198184030181529082905262461bcd60e51b825261059791600401612dbe565b611d0b828261108a565b610c805760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d433390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611d91828261108a565b15610c805760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611e07575060005460ff16155b611e235760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff16158015611e45576000805461ffff19166101011790555b8015610630576000805461ff001916905550565b600054610100900460ff1680611e72575060005460ff16155b611e8e5760405162461bcd60e51b815260040161059790612eba565b600054610100900460ff16158015611eb0576000805461ffff19166101011790555b6113de826118ee565b610c808282611d01565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f0b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610bd35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611f609089908990889088908890600401612c86565b602060405180830381600087803b158015611f7a57600080fd5b505af1925050508015611faa575060408051601f3d908101601f19168201909252611fa791810190612a53565b60015b611fb657611bcc6131de565b6001600160e01b0319811663f23a6e6160e01b146118595760405162461bcd60e51b815260040161059790612dd1565b6001600160a01b0383166120485760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610597565b336120788185600061205987611ec3565b61206287611ec3565b5050604080516020810190915260009052505050565b60008381526065602090815260408083206001600160a01b0388168452909152902054828110156120f75760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610597565b61210183826130d6565b60008581526065602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216636cdb3d1360e11b148061219d57506001600160e01b031982166303a24d0760e21b145b806105ed57506301ffc9a760e01b6001600160e01b03198316146105ed565b606060006121cb8360026130b7565b6121d690600261309f565b6001600160401b038111156121fb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612225576020820181803683370190505b509050600360fc1b8160008151811061224e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061228b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122af8460026130b7565b6122ba90600161309f565b90505b600181111561234e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122fc57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061232057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361234781613119565b90506122bd565b50831561239d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610597565b9392505050565b8280546123b090613130565b90600052602060002090601f0160209004810192826123d25760008555612418565b82601f106123eb57805160ff1916838001178555612418565b82800160010185558215612418579182015b828111156124185782518255916020019190600101906123fd565b50612424929150612428565b5090565b5b808211156124245760008155600101612429565b600082601f83011261244d578081fd5b8135602061245a8261307c565b604051612467828261316b565b8381528281019150858301600585901b87018401881015612486578586fd5b855b858110156124a457813584529284019290840190600101612488565b5090979650505050505050565b600082601f8301126124c1578081fd5b81356001600160401b038111156124da576124da6131c8565b6040516124f1601f8301601f19166020018261316b565b818152846020838601011115612505578283fd5b816020850160208301379081016020019190915292915050565b600060408284031215612530578081fd5b604051604081018181106001600160401b0382111715612552576125526131c8565b60405290508082356125638161327f565b8152602092830135920191909152919050565b600060208284031215612587578081fd5b813561239d8161327f565b600080604083850312156125a4578081fd5b82356125af8161327f565b915060208301356125bf8161327f565b809150509250929050565b600080600080600060a086880312156125e1578081fd5b85356125ec8161327f565b945060208601356125fc8161327f565b935060408601356001600160401b0380821115612617578283fd5b61262389838a0161243d565b94506060880135915080821115612638578283fd5b61264489838a0161243d565b93506080880135915080821115612659578283fd5b50612666888289016124b1565b9150509295509295909350565b600080600080600060a0868803121561268a578081fd5b85356126958161327f565b945060208601356126a58161327f565b9350604086013592506060860135915060808601356001600160401b038111156126cd578182fd5b612666888289016124b1565b600080600080608085870312156126ee578182fd5b84356126f98161327f565b93506020858101356001600160401b0380821115612715578485fd5b818801915088601f830112612728578485fd5b81356127338161307c565b60408051612741838261316b565b8381528681019250858701600685901b870188018e101561276057898afd5b8996505b8487101561278a576127768e8261251f565b845260019690960195928701928201612764565b5098508a01359650505060608801359250808311156127a7578384fd5b50506127b5878288016124b1565b91505092959194509250565b600080600080608085870312156127d6578182fd5b84356127e18161327f565b935060208501356001600160401b03808211156127fc578384fd5b6128088883890161243d565b9450604087013591508082111561281d578384fd5b6128298883890161243d565b9350606087013591508082111561283e578283fd5b506127b5878288016124b1565b6000806040838503121561285d578182fd5b82356128688161327f565b9150602083013580151581146125bf578182fd5b6000806040838503121561288e578182fd5b82356128998161327f565b946020939093013593505050565b6000806000606084860312156128bb578081fd5b83356128c68161327f565b95602085013595506040909401359392505050565b600080600080608085870312156128f0578182fd5b84356128fb8161327f565b9350602085013592506040850135915060608501356001600160401b03811115612923578182fd5b6127b5878288016124b1565b60008060408385031215612941578182fd5b82356001600160401b0380821115612957578384fd5b818501915085601f83011261296a578384fd5b813560206129778261307c565b604051612984828261316b565b8381528281019150858301600585901b870184018b10156129a3578889fd5b8896505b848710156129ce5780356129ba8161327f565b8352600196909601959183019183016129a7565b50965050860135925050808211156129e4578283fd5b506129f18582860161243d565b9150509250929050565b600060208284031215612a0c578081fd5b5035919050565b60008060408385031215612a25578182fd5b8235915060208301356125bf8161327f565b600060208284031215612a48578081fd5b813561239d81613294565b600060208284031215612a64578081fd5b815161239d81613294565b600060208284031215612a80578081fd5b81356001600160401b03811115612a95578182fd5b612aa1848285016124b1565b949350505050565b60008060408385031215612abb578182fd5b82356001600160401b0380821115612ad1578384fd5b612add868387016124b1565b93506020850135915080821115612af2578283fd5b506129f1858286016124b1565b60008060608385031215612b11578182fd5b82359150612b22846020850161251f565b90509250929050565b6000815180845260208085019450808401835b83811015612b5a57815187529582019590820190600101612b3e565b509495945050505050565b60008151808452612b7d8160208601602086016130ed565b601f01601f19169290920160200192915050565b60058110612baf57634e487b7160e01b600052602160045260246000fd5b9052565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612beb8160178501602088016130ed565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c1c8160288401602088016130ed565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612c5490830186612b2b565b8281036060840152612c668186612b2b565b90508281036080840152612c7a8185612b65565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612cc090830184612b65565b979650505050505050565b6001600160a01b03841681526020810183905260808101612aa1604083018480516001600160a01b03168252602090810151910152565b602080825282518282018190526000919060409081850190868401855b82811015612d5557612d4584835180516001600160a01b03168252602090810151910152565b9284019290850190600101612d1f565b5091979650505050505050565b60208152600061239d6020830184612b2b565b604081526000612d886040830185612b2b565b8281036020840152612d9a8185612b2b565b95945050505050565b60408101612db18285612b91565b61239d6020830184612b91565b60208152600061239d6020830184612b65565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252601390820152721a5b9d985b1a59081c1c9bdc1bdcd85b081a59606a1b604082015260600190565b60208082526015908201527418d85b9d985cc81a5cc81b9bdd0818dc99585d1959605a1b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600c908201526b6d616e61676572206f6e6c7960a01b604082015260600190565b6020808252600d908201526c696e76616c696420737461746560981b604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8581526001600160a01b03851660208201526040810184905260c08101613065606083018580516001600160a01b03168252602090810151910152565b61307260a0830184612b91565b9695505050505050565b60006001600160401b03821115613095576130956131c8565b5060051b60200190565b600082198211156130b2576130b26131b2565b500190565b60008160001904831182151516156130d1576130d16131b2565b500290565b6000828210156130e8576130e86131b2565b500390565b60005b838110156131085781810151838201526020016130f0565b838111156118c35750506000910152565b600081613128576131286131b2565b506000190190565b600181811c9082168061314457607f821691505b6020821081141561316557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715613190576131906131c8565b6040525050565b60006000198214156131ab576131ab6131b2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156131f357600481823e5160e01c5b90565b600060443d10156132045790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561323357505050505090565b828501915081518181111561324b5750505050505090565b843d87010160208285010111156132655750505050505090565b6132746020828601018761316b565b509095945050505050565b6001600160a01b038116811461063057600080fd5b6001600160e01b03198116811461063057600080fdfe6147c657c509b611c5b884671c7cb0da0e1eed364b561e0e9d48789b79421525241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a264697066735822122080f24fb3b360fafd8ae8f94b74b985e19cf51896fe492418f611e1b8af451c5464736f6c63430008040033",
  "devdoc": {
    "events": {
      "CanvasCreated(uint256,(address,uint256)[])": {
        "details": "Emitted when Canvas of id `id` is created with `layerInfos`."
      },
      "LayerAdded(uint256,(address,uint256))": {
        "details": "Emitted when a new layer token is added to a canvas"
      },
      "ProposalCreated(uint256,address,uint256,(address,uint256))": {
        "details": "Emitted when a new Proposal is created by `proposer` to add `layer` to Canvas of id `canvasID`."
      },
      "ProposalStateChanged(uint256,uint8,uint8)": {
        "details": "Emitted when a Proposal of `id` changed state from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "addProposal(uint256,(address,uint256))": {
        "details": "Creates new proposal to add `layer` to canvas of id `canvasID`"
      },
      "approvesProposal(uint256)": {
        "details": "Approves a proposal of id `proposalID`"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "Destroys `amount` number of `tokenId` from `account`."
      },
      "cancelProposal(uint256)": {
        "details": "Cancel a proposal of id `proposalID`"
      },
      "createCanvas(address,(address,uint256)[],uint256,bytes)": {
        "details": "create `amount` number of new canvas consiste of `layers` and tranfser to `to`"
      },
      "executesProposal(uint256)": {
        "details": "Executes a proposal of id `proposalID`"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantManagerRole(address)": {
        "details": "Grant `addr` Manager role"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Mints token `id` for `amount` quantity and transfers it to `to`. id must be already created canvas"
      },
      "mintBatch(address,uint256[],uint256[],bytes)": {
        "details": "Mints batch of tokens `ids` for `amount` quantity and transfers it to `to`."
      },
      "rejectsProposal(uint256)": {
        "details": "Rejects a proposal of id `proposalID`"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeManagerRole(address)": {
        "details": "Revoke `addr` Manager role"
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setName(string)": {
        "details": "Sets influencer name to `newName`."
      },
      "setURI(string)": {
        "details": "Sets a new URI for all token types"
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 532,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3107,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3356,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 601,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 607,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 609,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1631,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 86,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)81_storage)"
      },
      {
        "astId": 394,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6340,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 6365,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "canvasCount",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 6371,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "canvases",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(Canvas)6362_storage)"
      },
      {
        "astId": 6387,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "proposalCount",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 6398,
        "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
        "label": "proposals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_struct(Proposal)6384_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILayer)5876": {
        "encoding": "inplace",
        "label": "contract ILayer",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalState)6393": {
        "encoding": "inplace",
        "label": "enum InfluencerStorageV0.ProposalState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)81_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)81_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Canvas)6362_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InfluencerStorageV0.Canvas)",
        "numberOfBytes": "32",
        "value": "t_struct(Canvas)6362_storage"
      },
      "t_mapping(t_uint256,t_struct(LayerToken)6352_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InfluencerStorageV0.LayerToken)",
        "numberOfBytes": "32",
        "value": "t_struct(LayerToken)6352_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposal)6384_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InfluencerStorageV0.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)6384_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Canvas)6362_storage": {
        "encoding": "inplace",
        "label": "struct InfluencerStorageV0.Canvas",
        "members": [
          {
            "astId": 6354,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6356,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "layerCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6361,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "layerTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(LayerToken)6352_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LayerToken)6352_storage": {
        "encoding": "inplace",
        "label": "struct InfluencerStorageV0.LayerToken",
        "members": [
          {
            "astId": 6349,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "layer",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ILayer)5876"
          },
          {
            "astId": 6351,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "layerID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Proposal)6384_storage": {
        "encoding": "inplace",
        "label": "struct InfluencerStorageV0.Proposal",
        "members": [
          {
            "astId": 6373,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6375,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6377,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "canvasID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6380,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "layerToken",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(LayerToken)6352_storage"
          },
          {
            "astId": 6383,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "state",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ProposalState)6393"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)81_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 78,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 80,
            "contract": "contracts/Influencer/InfluencerV0.sol:InfluencerV0",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}